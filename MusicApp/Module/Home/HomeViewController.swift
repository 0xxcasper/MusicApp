//
//  HomeViewController.swift
//  MusicApp
//
//  Created admin on 29/03/2020.
//  Copyright © 2020 SangNX. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import SwipeCellKit
import RealmSwift
class HomeViewController: BaseViewController, HomeViewProtocol {

	var presenter: HomePresenterProtocol?
    var rowEdit: Int = 0
    private var data: [PlaylistModel] = [] {
        didSet{
            tbView.reloadData()
        }
    }
    @IBOutlet weak var topHeaderView: NSLayoutConstraint!
    @IBOutlet weak var heightCollectionView: NSLayoutConstraint!
    @IBOutlet weak var lblRecent: UILabel!
    @IBOutlet weak var lblPersonPlaylist: UILabel!
    
    private var recentList: [ItemPlayList] = [] {
        didSet{
            if(recentList.count == 0) {
                self.view.layoutIfNeeded()
                UIView.animate(withDuration: 0.1) {
                    self.view.layoutIfNeeded()
                    self.heightCollectionView.constant = 0
                    self.view.layoutIfNeeded()
                }
            } else {
                self.view.layoutIfNeeded()
                UIView.animate(withDuration: 0.1) {
                    self.view.layoutIfNeeded()
                    self.heightCollectionView.constant = 200
                    self.view.layoutIfNeeded()
                }
            }
            collectionView.reloadData()
        }
    }

    @IBOutlet weak var createPLView: CreatePlayListView!
    @IBOutlet weak var bottomAnchorCreateBar: NSLayoutConstraint!
    @IBOutlet weak var tbView: UITableView!
    @IBOutlet weak var collectionView: UICollectionView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.createPLView.delegate = self
        self.setupTbView()
        self.setupCollectionView()
        
        self.navigationController?.navigationBar.prefersLargeTitles = false
        self.navigationController?.navigationItem.largeTitleDisplayMode = .never
        
        self.setText()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.getPlayListData()
        self.getRecentData()
    }
    
    override func didChangeLanguage() {
        self.setText()
    }
    
    func setText() {
        lblRecent.text = LocalizableKey.recentPlayed.localizeLanguage
        lblPersonPlaylist.text = LocalizableKey.personPlaylist.localizeLanguage
    }
    
    private func setupTbView() {
        tbView.delegate = self
        tbView.dataSource = self
        tbView.rowHeight = 60
        tbView.separatorStyle = .none
        tbView.contentInset = UIEdgeInsets(top: 10, left: 0, bottom: 45, right: 0)
        tbView.registerXibFile(PlayListCell.self)
        topHeaderView.constant = AppConstant.STATUS_BAR_TOP + AppConstant.NAVI_BAR_HEIGHT
    }
    
    private func setupCollectionView() {
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(nibWithCellClass: RecentCell.self)
    }
    
    func getPlayListData() {
        self.data = []
        self.data = Array(PlaylistModel.getAll())
    }
    
    func getRecentData() {
        self.recentList = []
        self.recentList = Array(ItemPlayList.getAll()).reversed()
    }
    
    override func keyboardWillShow(_ notification: NSNotification) {
        if let keyboardFrame: NSValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue {
            let keyboardRectangle = keyboardFrame.cgRectValue
            let keyboardHeight = keyboardRectangle.height
            bottomAnchorCreateBar.constant = keyboardHeight
            view.layoutIfNeeded()
        }
    }
    
    override func keyboardWillHide(_ notification: NSNotification) {
        bottomAnchorCreateBar.constant = -170
        view.layoutIfNeeded()
    }

    @IBAction func createPlaylist(_ sender: Any) {
        createPLView.cellType = .create
        createPLView.txfInput.becomeFirstResponder()
    }
}

extension HomeViewController: CreatePlayListViewDelegate {
    func pressCreate(_ text: String, type: CreatePlayListType) {
        switch type {
        case .create:
            if !self.data.contains(where: {$0.name == text}) {
                let _ = PlaylistModel.add(name: text)
            }
            break
        default:
            if !self.data.contains(where: {$0.name == text}) {
                self.data[self.rowEdit].editName(name: text)
            }
        }
        self.view.endEditing(true)
        self.getPlayListData()

    }
    
    func pressCancel() {
        self.view.endEditing(true)
    }
    
    func pressCreate(_ text: String) {
        
        self.view.endEditing(true)
    }
}

extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return data.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(PlayListCell.self, for: indexPath)
        
        let item = data[indexPath.row]
        cell.lblName.text = item.name
        cell.lblNumber.text = String(item.items.count) + " Tracks"
        
        if(item.items.count > 0) {
            cell.img.loadImageFromInternet(link: item.items.last!.thumbnail, completion: nil)
        } else {
            cell.img.image = #imageLiteral(resourceName: "ic_icon")
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let item = data[indexPath.row]
        let vc = PersonPlayListViewController()
        vc.playList = item
        self.push(controller: vc)
        debugPrint(item)
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {}
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let editAction = UITableViewRowAction(style: .normal, title: "Edit") { (action, indexPath) in
            let item = self.data[indexPath.row]
            self.rowEdit = indexPath.row
            self.createPLView.cellType = .edit
            self.createPLView.txfInput.text = item.name
            self.createPLView.txfInput.becomeFirstResponder()
        }
        editAction.backgroundColor = .green
        let deleteAction = UITableViewRowAction(style: .destructive, title: "Delete") { (action, indexPath) in
            self.data[indexPath.row].delete()
            self.getPlayListData()
        }
        return [deleteAction, editAction]
    }

}

extension HomeViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return recentList.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withClass: RecentCell.self, for: indexPath)
        let item = recentList[indexPath.row]
        cell.lblName.text = item.name + " | " + item.channelTitle
        if(item.thumbnail != "") {
            cell.img.loadImageFromInternet(link: item.thumbnail, completion: nil)
        } else {
            cell.img.image = #imageLiteral(resourceName: "ic_icon")
        }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.height * 0.8, height: collectionView.height)
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let data = ["items": self.recentList,
                    "currentIndex": indexPath.row,
                    "type":  PlaylistType.playlist] as [String : Any]
        NotificationCenter.default.post(name: .OpenPlayBar, object: nil, userInfo: data)
    }
}
